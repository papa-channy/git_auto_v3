diff --git a/scripts/upload.py b/scripts/upload.py
index ee018e1..aeeef53 100644
--- a/scripts/upload.py
+++ b/scripts/upload.py
@@ -1,115 +1,78 @@
-import subprocess
-import json
 from pathlib import Path
-from datetime import datetime
-from notify import discord, gmail, kakao, slack
-from record import notion, google_drive
+import json
+from collections import defaultdict
+from utils.cfg import cfg
+from scripts.dataframe import load_df
+from scripts.classify import classify_main
+from scripts.upload_utils import get_file_path, do_git_commit, send_notification
+from scripts.ext_info import to_safe_filename
+import record.notion as notion
 
-def get_repo_name():
-    import subprocess
-    try:
-        url = subprocess.run("git config --get remote.origin.url", shell=True, capture_output=True, text=True).stdout.strip()
-        repo = url.rstrip(".git").split("/")[-1] if url else "Unknown"
-        return repo.replace("-", " ").title()
-    except Exception:
-        return "Unknown Repo"
+def upload_main():
+    timestamp = cfg.get_timestamp()  # ✅ 고정값 사용
+    log_file = cfg.init_log_file(timestamp)
+    paths = cfg.get_results_path(timestamp)
 
-def log(message: str, log_file: Path):
-    with log_file.open("a", encoding="utf-8") as f:
-        f.write(f"[{datetime.now().strftime('%H:%M:%S')}] {message}\n")
+    strategy_df = load_df(paths["strategy"])
+    if strategy_df is None or strategy_df.empty:
+        cfg.log("❌ strategy_df 없음 → 업로드 중단", log_file)
+        return
 
-def do_git_commit(file_path: str, commit_msg: str) -> bool:
-    try:
-        # FILE별 커밋: 해당 FILE만 add
-        subprocess.run(["git", "add", file_path], check=True)
-        subprocess.run(["git", "commit", "-m", commit_msg], check=True)
-        subprocess.run(["git", "push"], check=True)
-        return True
-    except subprocess.CalledProcessError:
-        return False
+    result = classify_main()
+    commit_msgs = result["commit"]
+    fx_summary = result["fx_summary"]
+    notify = result["notify"]
 
-def send_notification(platforms: list, message: str, log_func):
-    for platform in platforms:
-        try:
-            if platform == "discord":
-                discord.send(message)
-            elif platform == "gmail":
-                gmail.send(message)
-            elif platform == "kakao":
-                kakao.send(message)
-            elif platform == "slack":
-                slack.send(message)
-        except Exception as e:
-            log_func(f"[ERROR] {platform} 알림 실패: {e}")
+    strategy_map = strategy_df.set_index("File").to_dict(orient="index")
+    commit_result = {}
+    commit_groups = {"success": [], "fallback": [], "fail": []}
 
-def write_records(platforms: list, message: str, log_func):
-    repo_name = get_repo_name()
-    for platform in platforms:
-        try:
-            if platform == "notion":
-                notion.upload_date_based_record("", "", message)
-            elif platform == "google_drive":
-                google_drive.send(message)
-            elif platform == "slack":
-                slack.send(message)
-        except Exception as e:
-            log_func(f"[ERROR] {platform} 기록 실패: {e}")
+    for file in strategy_df["File"]:
+        row = strategy_map.get(file)
+        if not row:
+            cfg.log(f"⚠️ strategy_df에 {file} 없음", log_file)
+            commit_result[file] = "❌"
+            commit_groups["fail"].append(file)
+            continue
 
-def upload_main(timestamp: str, log_file: Path):
-    # 폴더: logs/{timestamp}
-    log_dir = Path(f"logs/{timestamp}")
+        filepath = Path(row["path"]) / to_safe_filename(file)
 
-    # 커밋 메시지 처리: commit_out_*.txt
-    commit_files = list(log_dir.glob("commit_out_*.txt"))
-    commit_results = {}
-    commit_msgs = []
+        if file in commit_msgs:
+            msg = commit_msgs[file]
+            success = do_git_commit(filepath, msg, lambda m: cfg.log(m, log_file))
+            commit_result[file] = "✅" if success else "❌"
+            commit_groups["success" if success else "fail"].append(file)
+        else:
+            dummy_msg = f"chore(auto): {file} 변경사항 (no LLM commit message)"
+            success = do_git_commit(filepath, dummy_msg, lambda m: cfg.log(m, log_file))
+            commit_result[file] = "⚠️ fallback" if success else "❌"
+            commit_groups["fallback" if success else "fail"].append(file)
 
-    for file in commit_files:
-        # key: FILE명만 (접두어 제거)
-        key = file.name.replace("commit_out_", "").replace(".txt", "")
-        commit_msg = file.read_text(encoding="utf-8").strip()
-        # FILE 경로 처리: 여기선 간단히 key를 그대로 사용 (필요 시 실제 경로로 확장)
-        file_path = key  
-        success = do_git_commit(file_path, commit_msg)
-        commit_results[key] = "Success" if success else "Failure"
-        commit_msgs.append(f"{key}: {commit_msg}")
+    cfg.log(f"✅ Git 커밋 결과 요약:\n{json.dumps(commit_result, ensure_ascii=False, indent=2)}", log_file)
 
-    # 알림 메시지 구성
-    summary_msg = f"커밋 파이프라인 결과: {json.dumps(commit_results, ensure_ascii=False)}"
-    cost_summary = "💸 총 비용: 계산 완료"  # 실제 비용은 cost_calc 모듈에서 받아오기
-    review_path = Path("results/manual_review.json")
-    review_files = []
-    if review_path.exists():
-        try:
-            review_files = json.loads(review_path.read_text(encoding="utf-8"))
-        except Exception:
-            review_files = []
-    notify_msg = (
-        f"{summary_msg}\n"
-        f"커밋 메시지:\n" + "\n".join(commit_msgs) + "\n"
-        f"{cost_summary}\n"
-        f"중요도 9 이상 FILE: {review_files}"
+    notify_text = (
+        f"{notify['summary']}\n\n📌 비용 요약: {notify['cost_total']}\n"
+        + "\n".join(notify["commits"][:5])
     )
+    if commit_groups["fail"]:
+        notify_text += f"\n🚫 커밋 실패 파일: {', '.join(commit_groups['fail'])}"
+    if commit_groups["fallback"]:
+        notify_text += f"\n⚠️ 메시지 없이 커밋된 파일: {', '.join(commit_groups['fallback'])}"
+    if notify.get("review_files"):
+        notify_text += f"\n🧐 수동 검토 대상: {', '.join(notify['review_files'])}"
 
-    # 기록 메시지 처리: fx_out_*.txt
-    record_files = list(log_dir.glob("fx_out_*.txt"))
-    record_msgs = {}
-    for file in record_files:
-        key = file.name.replace("fx_out_", "").replace(".txt", "")
-        record_msgs[key] = file.read_text(encoding="utf-8")
-
-    # 로그 업로드 메시지 기록
-    log(f"✅ 업로드: {notify_msg}", log_file)
-    send_notification(["kakao", "discord", "gmail", "slack"], notify_msg, lambda m: log(m, log_file))
+    send_notification(["kakao", "slack", "discord", "gmail"], notify_text, lambda m: cfg.log(m, log_file))
 
-    # 각 FILE별 기록 메시지 업로드
-    for key, msg in record_msgs.items():
-        write_records(["notion", "google_drive", "slack"], msg, lambda m: log(m, log_file))
+    notion_failures = []
+    for file, text in fx_summary.items():
+        try:
+            notion.upload_fx_record(file, text)
+        except Exception as e:
+            notion_failures.append(file)
+            cfg.log(f"[NOTION] {file} 업로드 실패: {e}", log_file)
 
-    log("✅ 업로드 처리 완료", log_file)
+    if notion_failures:
+        cfg.log(f"[NOTION] 업로드 실패 파일 목록: {notion_failures}", log_file)
+        notify_text += f"\n📭 Notion 업로드 실패: {', '.join(notion_failures)}"
 
-if __name__ == "__main__":
-    # timestamp는 runall.py에서 생성한 값을 사용 (예시로 고정)
-    timestamp = "250514_1234"  # 실제 사용 시 동적으로 받아오기
-    log_file = Path(f"logs/{timestamp}/trigger.log")
-    upload_main(timestamp, log_file)
+    cfg.log("✅ 전체 업로드 완료", log_file)