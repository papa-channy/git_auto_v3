### 📝 요약 내용

`ext_info.py` 스크립트는 Git 저장소와 관련된 다양한 정보를 추출하고 처리하는 기능을 수행합니다. 주요 기능은 다음과 같습니다:

1. **`run_git` 함수**: Git 명령어를 실행하여 결과를 반환합니다. 현재 작업 디렉토리(`cwd`)에서 Git 명령을 수행할 수 있습니다.
2. **`extract_repo_info` 함수**: 저장소의 정보를 추출하여 데이터프레임으로 반환합니다. README FILE의 토큰 수를 매개변수로 받습니다.
3. **`count_filetypes` 함수**: 주어진 FILE 목록에서 FILE 확장자를 카운트하여 딕셔너리 형태로 반환합니다.
4. **`extract_info_and_strategy` 함수**: FILE 목록과 README STRATEGY을 기반으로 정보 데이터프레임(`info_df`)과 전략 데이터프레임(`strat_df`)을 생성합니다.
5. **`extract_readme_token_and_strategy` 함수**: README FILE의 토큰 수와 처리 전략을 결정합니다. 토큰 수에 따라 다른 전략을 반환합니다.
6. **`decide_commit_count` 함수**: 특정 날짜(`third_date`)를 기반으로 커밋 횟수를 결정합니다. 날짜가 `None`일 경우 기본값을 반환합니다.

### 🔗 레포 전체 구조에서의 역할과 연계성

이 스크립트는 `scripts` 디렉토리에 위치하며, 다른 스크립트와 함께 프로젝트의 자동화 및 정보 추출 파이프라인의 일부로 작동합니다. 주요 연계성을 가지는 요소는 다음과 같습니다:

- **`dataframe.py`**: `ext_info.py`에서 데이터프레임을 생성하거나 조작할 때 사용될 가능성이 높습니다. 두 스크립트는 데이터 처리 과정에서 긴밀하게 연결되어 있습니다.
- **`llm_router.py` 및 기타 LLM 관련 스크립트**: README 처리 전략을 결정하는 과정에서 LLM(대형 언어 MODEL NAME)을 활용할 수 있으며, 이는 `llm` 디렉토리 내의 스크립트와 관련이 있을 수 있습니다.
- **`auto.sh`**: 프로젝트 루트에서 실행되는 자동화 스크립트로, `ext_info.py`를 포함한 여러 스크립트를 순차적으로 실행할 가능성이 있습니다.
- **`results` 디렉토리**: 추출된 정보(`info_df.pkl`, `repo_df.pkl`, `strategy_df.pkl`)가 저장되는 곳으로, `ext_info.py`에서 생성된 데이터프레임이 저장될 가능성이 높습니다.

### 💡 주요 로직 요약

1. Git 명령어를 실행하여 저장소 정보를 추출합니다.
2. README FILE의 토큰 수를 계산하고, 이를 기반으로 처리 전략을 결정합니다.
3. 저장소 내 FILE 목록을 분석하여 FILE 유형을 카운트하고, 정보 및 전략 데이터프레임을 생성합니다.
4. 특정 조건에 따라 커밋 횟수를 결정합니다.

이 스크립트는 프로젝트의 자동화 및 정보 추출 과정에서 중요한 역할을 수행하며, 다른 스크립트 및 구성 요소와 연계되어 전체 파이프라인을 구성합니다.