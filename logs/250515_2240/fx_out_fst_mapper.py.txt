### 📝 요약 결과

#### 스크립트 주요 기능 및 로직 요약
`fst_mapper.py`는 데이터 처리 파이프라인의 일부로 보입니다. 주요 기능은 다음과 같습니다:
1. **`classify_strategy` 함수**: 각 행(`row`)에 대해 특정 전략을 반환하는 로직을 포함합니다. 현재는 "full_pass", "mid_focus", "keyword_only" 중 하나를 반환하도록 구성되어 있으나, 실제 구현은 주석 처리되어 있습니다.
2. **`log` 함수**: 주어진 메시지를 특정 로그 FILE에 기록하는 기능을 수행합니다.
3. **`fst_mapper_main` 함수**: 스크립트의 메인 실행 함수로, 주요 데이터 처리 로직을 포함할 것으로 예상됩니다. 현재는 구체적인 내용이 비어 있습니다.

이 스크립트는 `scripts/dataframe.py` 모듈을 임포트하여 데이터프레임 로딩 및 저장 기능을 활용합니다. 주요 데이터 처리 흐름은 다음과 같을 것으로 추정됩니다:
- 데이터 로딩 (`load_df`)
- 전략 분류 (`classify_strategy`)
- 로그 기록 (`log`)
- 메인 데이터 처리 (`fst_mapper_main`)

#### 레포 전체 구조에서의 역할 및 연계성
`fst_mapper.py`는 `scripts` 디렉토리에 위치하며, 데이터 처리 및 변환을 담당하는 모듈로 보입니다. 전체 프로젝트 구조에서 다음과 같은 역할을 수행할 것으로 추정됩니다:
1. **데이터 처리 파이프라인의 일부**: 다른 스크립트(`dataframe.py`, `llm_router.py` 등)와 연계되어 데이터 처리 및 변환 작업을 수행합니다.
2. **자동화 워크플로우의 구성 요소**: `runall.py` 또는 `auto.sh`와 같은 스크립트와 연계되어 자동화된 데이터 처리 작업을 수행할 수 있습니다.
3. **데이터 저장 및 로딩**: `results` 디렉토리에 저장된 데이터프레임 FILE(`info_df.pkl`, `repo_df.pkl` 등)과 상호작용합니다.

#### 주요 연계 스크립트 및 구성 요소
- `scripts/dataframe.py`: 데이터프레임 로딩 및 저장 기능 제공
- `llm_router.py`: LLM 관련 데이터 처리 및 라우팅 기능 수행
- `auto.sh`: 자동화 워크플로우 실행 스크립트
- `runall.py`: 전체 프로세스 실행을 위한 스크립트 (존재하는 경우)

### 📌 주요 포인트
1. **`fst_mapper.py`는 데이터 처리 및 변환을 담당하는 스크립트입니다.**
2. **`classify_strategy` 및 `log` 함수와 같은 주요 기능을 포함합니다.**
3. **프로젝트의 자동화 워크플로우 내에서 중요한 역할을 수행할 것으로 예상됩니다.**