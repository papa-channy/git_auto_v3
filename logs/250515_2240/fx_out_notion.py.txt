요청하신 `notion.py` 스크립트의 주요 기능과 로직을 300 tokens 내외로 요약해 드리겠습니다.

### 주요 기능
`notion.py`는 Notion API와 상호작용하여 블록을 생성하거나 데이터를 업로드하는 기능을 수행합니다. 주요 기능은 다음과 같습니다.

1. **Notion 블록 조회**: `get_notion_blocks(parent_id)` 함수를 통해 특정 부모 블록 아래의 자식 블록들을 조회합니다.
2. **Toggle 블록 생성 또는 조회**: `find_or_create_toggle_block(parent_id, title_text)` 함수를 통해 특정 제목의 Toggle 블록을 찾거나 새로 생성합니다.
3. **Paragraph 블록 생성**: `create_paragraph_block(title: str, text: str)` 함수를 통해 제목과 내용을 포함한 Paragraph 블록을 생성합니다.
4. **FX 기록 업로드**: `upload_fx_record(filename: str, fx_text: str)` 함수를 통해 특정 FILE 이름과 내용을 Notion에 업로드합니다.

### 로직
- Notion API와의 상호작용을 위해 필요한 인증 정보는 `.env` FILE에서 로드됩니다.
- 각 함수는 Notion API 엔드포인트에 HTTP 요청을 보내고, 응답을 처리하여 필요한 데이터를 추출하거나 블록을 생성합니다.

### 레포 전체 구조에서의 역할
`notion.py`는 `record` 디렉토리에 위치하며, 프로젝트 내에서 Notion과 관련된 데이터 처리를 담당합니다. 다른 스크립트나 모듈에서 Notion에 데이터를 기록하거나 조회할 때 이 FILE을 통해 Notion API와 상호작용합니다. 예를 들어, `scripts/upload.py`나 다른 기록 관련 스크립트에서 `notion.py`의 함수들을 호출하여 Notion에 데이터를 업로드할 수 있습니다.

### 연계성
- `utils/path.py`: 경로 관련 유틸리티 함수가 포함되어 있어, `notion.py`에서 FILE 경로를 처리할 때 활용될 수 있습니다.
- `scripts/upload.py`: Notion에 데이터를 업로드하는 스크립트로, `notion.py`의 함수들을 호출하여 실제 업로드 로직을 수행합니다.
- `config/*.json`: 설정 FILE로, Notion API와 관련된 설정 정보가 포함되어 있을 수 있습니다.

### 결론
`notion.py`는 Notion과의 데이터 상호작용을 담당하는 핵심 FILE로, 프로젝트 내에서 Notion을 활용한 자동화 및 데이터 관리를 가능하게 합니다.